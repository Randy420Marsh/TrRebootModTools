#define TR_VERSION 10
#include "../../trcommon.bt"

typedef struct
{
    ushort id;
} Symbol <optimize=false>;

typedef union
{
    short byUserDefinedIndex;
    ushort byBoneIndex;
    short byBoneID;
    ushort byMarkerIndex;
    ushort byMarkerID;
} ModelBoneOrMarkerReferenceWithContext__ModelBoneOrMarkerRefData;

typedef struct
{
    ubyte refType;
    FSkip(1);
    ModelBoneOrMarkerReferenceWithContext__ModelBoneOrMarkerRefData refData;
} ModelBoneOrMarkerReferenceWithContext <optimize=false>;

typedef struct
{
    ModelBoneOrMarkerReferenceWithContext boneMarker;
} AnimTargetData__ObjectModelBoneMarkerReference <optimize=false>;

typedef union
{
    ushort uSpatialprobeIndex;
    AnimTargetData__ObjectModelBoneMarkerReference otherInstanceBoneMarker;
    int otherInstanceModelMarkerIndex;
} AnimTargetData__ActorData__TargetInfoUnion;

typedef struct
{
    ushort timerType;
    FSkip(2);
    int frames;
} HostedSCTimer <optimize=false>;

typedef struct
{
    int namedValueFrequency;
    Symbol namedValuePos;
    Symbol namedValueRot;
    Symbol namedValueYRot;
    Symbol namedValueZRot;
    Symbol namedValueTime;
    Symbol namedValueWait;
    Symbol namedValuePointOfInterest;
    Symbol namedValueLeftOrRight;
    Symbol namedValueForward;
    FSkip(2);
    int moveToTarget;
    AnimTargetData__ActorData__TargetInfoUnion moveToInfo;
    byte bMoveToUseOffset;
    FSkip(3);
    int moveToOffsetRefFrame;
    int vMoveToOffset[3];
    int rotateToRefFrame;
    int rotateToTarget;
    AnimTargetData__ActorData__TargetInfoUnion rotateToInfo;
    float rotateWorldDeg;
    byte bRot180;
    FSkip(3);
    float angleOffset;
    byte bRotZOnly;
    byte bTiltMatchSlope;
    byte bUseOffsetFromMoveToInstance;
    FSkip(1);
    HostedSCTimer postAnimTargetRestoreTiltSCTimer;
    HostedSCTimer postAnimTargetRestoreTiltSCTimerFail;
    float fRestoreTiltDegPerFrame;
    float fTargetTime;
    int zOverrideOption;
    int zOverrideMethod;
    ushort uSpatialprobeGroundIndex;
    FSkip(2);
    float zOverrideCodeOverXFrames;
    byte bDoWait;
    byte bGroundOnDone;
    byte doPostAnimTargetGrounding;
    FSkip(1);
    HostedSCTimer postAnimTargetGroundingHostedSCTimer;
} AnimTargetData__ActorData <optimize=false>;

typedef struct
{
    unsigned int hash;
} EventEnum <optimize=false>;

typedef struct
{
    AnimTargetData__ActorData initiaterInstance;
    EventEnum eEventAnimTargetStart;
    AnimTargetData__ActorData partnerInstance;
    FSkip(4);
    Ref nameRef;
    if (CanSeekTo(nameRef))
    {
        SeekToRef(nameRef);
        string name;
        ReturnFromRef();
    }
    ushort initiaterObjectID;
    FSkip(6);
    Ref spatialProbeListRef;
    unsigned int spatialProbeListCount;
    if (CanSeekTo(spatialProbeListRef))
    {
        SeekToRef(spatialProbeListRef);
        unsigned int spatialProbeList[spatialProbeListCount];
        ReturnFromRef();
    }
    FSkip(4);
    Ref groundSpatialProbeListRef;
    unsigned int groundspatialProbeListCount;
    if (CanSeekTo(groundSpatialProbeListRef))
    {
        SeekToRef(groundSpatialProbeListRef);
        unsigned int groundSpatialProbeList[groundspatialProbeListCount];
        ReturnFromRef();
    }
    byte bspatialProbesFromPartnerInstead;
    byte bInstantRelocationOffset;
    FSkip(2);
} AnimTargetData <optimize=false, read=Str("%s", name)>;

typedef struct
{
    Ref animTargetDataListRef;
    unsigned int animTargetDataListCount;
    if (CanSeekTo(animTargetDataListRef))
    {
        SeekToRef(animTargetDataListRef);
        AnimTargetData animTargetDataList[animTargetDataListCount];
        ReturnFromRef();
    }
} AnimTargetComponent <optimize=false>;

RefDefinitions refDefinitions;
AnimTargetComponent root <open=true>;