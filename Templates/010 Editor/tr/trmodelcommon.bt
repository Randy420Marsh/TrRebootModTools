enum <uint> VertexAttributeName
{
    POSITION            = 0xD2F7D823,
    NORMAL              = 0x36F5E414,
    TESSELATION_NORMAL  = 0x3E7F6149,
    TANGENT             = 0xF1ED11C3,
    BINORMAL            = 0x64A86F01,
    SKIN_WEIGHTS        = 0x48E691C0,
    SKIN_INDICES        = 0x5156D8D3,
    COLOR1              = 0x7E7DD623,
    COLOR2              = 0x733EF0FA,
    TEXCOORD1           = 0x8317902A,
    TEXCOORD2           = 0x8E54B6F3,
    TEXCOORD3           = 0x8A95AB44,
    TEXCOORD4           = 0x94D2FB41,
    
    INVMASS             = 0xF3D624A6,
    GLOBAL_ROT          = 0x6005F8E6,
    LOCAL_ROT           = 0x711B7056,
    THICKNESS           = 0x31DB583D,
    REF_VECS            = 0xB9344C33
};

enum <byte> VertexAttributeType
{
    VAT_FLOAT1,
    VAT_FLOAT2,
    VAT_FLOAT3,
    VAT_FLOAT4,
    VAT_R8G8B8A8_UNORM,
    VAT_R8G8B8A8_UINT,
    VAT_R16G16_SINT,
    VAT_R16G16B16A16_SINT,
    VAT_R16G16B16A16_UINT,
    VAT_R32G32B32A32_UINT,
    VAT_R16G16_SNORM,
    VAT_R16G16B16A16_SNORM,
    VAT_R16G16_UNORM,
    VAT_R16G16B16A16_UNORM,
    VAT_R10G10B10A2_UINT,
    VAT_R10G10B10A2_UNORM
};

enum <byte> VertexAttributeClass9
{
    VAC9_FLOAT1,
    VAC9_FLOAT2,
    VAC9_FLOAT3,
    VAC9_FLOAT4,
    VAC9_COLOR32,
    VAC9_VECTORC32,
    VAC9_WEIGHTSC32,
    VAC9_INDICESC32,
    VAC9_UBYTE4,
    VAC9_SHORT2,
    VAC9_SHORT4,
    VAC9_UBYTE4N,
    VAC9_SHORT2N,
    VAC9_SHORT4N,
    VAC9_USHORT2N,
    VAC9_USHORT4N,
    VAC9_UDEC3,
    VAC9_DEC3N,
    VAC9_WEIGHTSUB4N,
    VAC9_TEXCOORDS2,
    VAC9_TEXCOORDS4,
    VAC9_DEC4N
};

local VertexAttributeType gTr9VertexAttributeClassTypes[22];
gTr9VertexAttributeClassTypes[VAC9_FLOAT1] = VAT_FLOAT1;
gTr9VertexAttributeClassTypes[VAC9_FLOAT2] = VAT_FLOAT2;
gTr9VertexAttributeClassTypes[VAC9_FLOAT3] = VAT_FLOAT3;
gTr9VertexAttributeClassTypes[VAC9_FLOAT4] = VAT_FLOAT4;
gTr9VertexAttributeClassTypes[VAC9_COLOR32] = VAT_R8G8B8A8_UNORM;
gTr9VertexAttributeClassTypes[VAC9_VECTORC32] = VAT_R8G8B8A8_UNORM;
gTr9VertexAttributeClassTypes[VAC9_WEIGHTSC32] = VAT_R8G8B8A8_UINT;
gTr9VertexAttributeClassTypes[VAC9_INDICESC32] = VAT_R8G8B8A8_UINT;
gTr9VertexAttributeClassTypes[VAC9_UBYTE4] = VAT_R8G8B8A8_UINT;
gTr9VertexAttributeClassTypes[VAC9_SHORT2] = VAT_R16G16_SINT;
gTr9VertexAttributeClassTypes[VAC9_SHORT4] = VAT_R16G16B16A16_SINT;
gTr9VertexAttributeClassTypes[VAC9_UBYTE4N] = VAT_R8G8B8A8_UNORM;
gTr9VertexAttributeClassTypes[VAC9_SHORT2N] = VAT_R16G16_SNORM;
gTr9VertexAttributeClassTypes[VAC9_SHORT4N] = VAT_R16G16B16A16_SNORM;
gTr9VertexAttributeClassTypes[VAC9_USHORT2N] = VAT_R16G16_UNORM;
gTr9VertexAttributeClassTypes[VAC9_USHORT4N] = VAT_R16G16B16A16_UNORM;
gTr9VertexAttributeClassTypes[VAC9_UDEC3] = VAT_R10G10B10A2_UINT;
gTr9VertexAttributeClassTypes[VAC9_DEC3N] = VAT_R10G10B10A2_UNORM;
gTr9VertexAttributeClassTypes[VAC9_WEIGHTSUB4N] = VAT_R8G8B8A8_UNORM;
gTr9VertexAttributeClassTypes[VAC9_TEXCOORDS2] = VAT_R16G16_SNORM;
gTr9VertexAttributeClassTypes[VAC9_TEXCOORDS4] = VAT_R16G16B16A16_SNORM;

enum <byte> VertexAttributeClass11
{
    VAC11_FLOAT1,
    VAC11_FLOAT2,
    VAC11_FLOAT3,
    VAC11_FLOAT4,
    VAC11_COLOR32,
    VAC11_VECTORC32,
    VAC11_WEIGHTSC32,
    VAC11_INDICESC32,
    VAC11_UBYTE4,
    VAC11_SHORT2,
    VAC11_SHORT4,
    VAC11_USHORT4,
    VAC11_UINT4,
    VAC11_UBYTE4N,
    VAC11_SHORT2N,
    VAC11_SHORT4N,
    VAC11_USHORT2N,
    VAC11_USHORT4N,
    VAC11_UDEC3,
    VAC11_UDEC3N,
    VAC11_DEC3N,
    VAC11_DEC4N,
    VAC11_WEIGHTSUB4N,
    VAC11_WEIGHTSUB4,
    VAC11_WEIGHTSUHALF4,
    VAC11_TEXCOORDS2,
    VAC11_TEXCOORDS4
};

local VertexAttributeType gTr11VertexAttributeClassTypes[27];
gTr11VertexAttributeClassTypes[VAC11_FLOAT1] = VAT_FLOAT1;
gTr11VertexAttributeClassTypes[VAC11_FLOAT2] = VAT_FLOAT2;
gTr11VertexAttributeClassTypes[VAC11_FLOAT3] = VAT_FLOAT3;
gTr11VertexAttributeClassTypes[VAC11_FLOAT4] = VAT_FLOAT4;
gTr11VertexAttributeClassTypes[VAC11_COLOR32] = VAT_R8G8B8A8_UNORM;
gTr11VertexAttributeClassTypes[VAC11_VECTORC32] = VAT_R8G8B8A8_UNORM;
gTr11VertexAttributeClassTypes[VAC11_WEIGHTSC32] = VAT_R8G8B8A8_UINT;
gTr11VertexAttributeClassTypes[VAC11_INDICESC32] = VAT_R8G8B8A8_UINT;
gTr11VertexAttributeClassTypes[VAC11_UBYTE4] = VAT_R8G8B8A8_UINT;
gTr11VertexAttributeClassTypes[VAC11_SHORT2] = VAT_R16G16_SINT;
gTr11VertexAttributeClassTypes[VAC11_SHORT4] = VAT_R16G16B16A16_SINT;
gTr11VertexAttributeClassTypes[VAC11_USHORT4] = VAT_R16G16B16A16_UINT;
gTr11VertexAttributeClassTypes[VAC11_UINT4] = VAT_R32G32B32A32_UINT;
gTr11VertexAttributeClassTypes[VAC11_UBYTE4N] = VAT_R8G8B8A8_UNORM;
gTr11VertexAttributeClassTypes[VAC11_SHORT2N] = VAT_R16G16_SNORM;
gTr11VertexAttributeClassTypes[VAC11_SHORT4N] = VAT_R16G16B16A16_SNORM;
gTr11VertexAttributeClassTypes[VAC11_USHORT2N] = VAT_R16G16_UNORM;
gTr11VertexAttributeClassTypes[VAC11_USHORT4N] = VAT_R16G16B16A16_UNORM;
gTr11VertexAttributeClassTypes[VAC11_UDEC3] = VAT_R10G10B10A2_UINT;
gTr11VertexAttributeClassTypes[VAC11_UDEC3N] = VAT_R10G10B10A2_UNORM;
gTr11VertexAttributeClassTypes[VAC11_DEC3N] = VAT_R10G10B10A2_UNORM;
gTr11VertexAttributeClassTypes[VAC11_WEIGHTSUB4N] = VAT_R8G8B8A8_UNORM;
gTr11VertexAttributeClassTypes[VAC11_WEIGHTSUB4] = VAT_R8G8B8A8_UINT;
gTr11VertexAttributeClassTypes[VAC11_WEIGHTSUHALF4] = VAT_R16G16B16A16_UINT;
gTr11VertexAttributeClassTypes[VAC11_TEXCOORDS2] = VAT_R16G16_SNORM;
gTr11VertexAttributeClassTypes[VAC11_TEXCOORDS4] = VAT_R16G16B16A16_SNORM;

typedef struct
{
    VertexAttributeName name;
    short offset <format=hex>;
    
    switch (TR_VERSION)
    {
        case 9:
        case 10:
            VertexAttributeClass9 class;
            local VertexAttributeType type = gTr9VertexAttributeClassTypes[class];
            break;
        
        case 11:
            VertexAttributeClass11 class;
            local VertexAttributeType type = gTr11VertexAttributeClassTypes[class];
            break;
    }
    byte vertexBufferIdx;
} VertexFormatAttribute <read=EnumToString(name), optimize=false>;

typedef struct
{
    quad hash <format=hex>;
    ushort numAttributes;
    ubyte vertexSizes[2] <format=hex>;
    FSkip(4);
    VertexFormatAttribute attributes[numAttributes];
} VertexFormat;

typedef struct (VertexAttributeName name, VertexAttributeType type)
{
    local VertexAttributeName name_ = name;
    switch (type)
    {
        case VAT_FLOAT1:
            float x;
            break;
        
        case VAT_FLOAT2:
            float x, y;
            break;
        
        case VAT_FLOAT3:
            float x, y, z;
            break;
        
        case VAT_FLOAT4:
            float x, y, z, w;
            break;
        
        case VAT_R8G8B8A8_UNORM:
            ubyte x <read=(this / 255.0)>;
            ubyte y <read=(this / 255.0)>;
            ubyte z <read=(this / 255.0)>;
            ubyte w <read=(this / 255.0)>;
            break;
        
        case VAT_R8G8B8A8_UINT:
            ubyte x, y, z, w;
            break;
        
        case VAT_R16G16_SINT:
            short x, y;
            break;
        
        case VAT_R16G16B16A16_SINT:
            short x, y, z, w;
            break;
        
        case VAT_R16G16B16A16_UINT:
            ushort x, y, z, w;
            break;
        
        case VAT_R32G32B32A32_UINT:
            uint x, y, z, w;
            break;
        
        case VAT_R16G16_SNORM:
            short x <read=(this / 32768.0)>;
            short y <read=(this / 32768.0)>;
            break;
        
        case VAT_R16G16B16A16_SNORM:
            short x <read=(this / 32768.0)>;
            short y <read=(this / 32768.0)>;
            short z <read=(this / 32768.0)>;
            short w <read=(this / 32768.0)>;
            break;
        
        case VAT_R16G16_UNORM:
            ushort x <read=(this / 65535.0)>;
            ushort y <read=(this / 65535.0)>;
            break;
        
        case VAT_R16G16B16A16_UNORM:
            ushort x <read=(this / 65535.0)>;
            ushort y <read=(this / 65535.0)>;
            ushort z <read=(this / 65535.0)>;
            ushort w <read=(this / 65535.0)>;
            break;
        
        case VAT_R10G10B10A2_UINT:
            uint x : 10;
            uint y : 10;
            uint z : 10;
            uint w : 2;
            break;
        
        case VAT_R10G10B10A2_UNORM:
            uint x : 10 <read=(this / 1023.0)>;
            uint y : 10 <read=(this / 1023.0)>;
            uint z : 10 <read=(this / 1023.0)>;
            uint w : 2  <read=(this / 3.0)>;
            break;
    }
} VertexAttribute <read=EnumToString(name_)>;

void MakeVertexAttributes(VertexFormat& format)
{
    local int vertexPos = FTell();
    local int i;
    for (i = 0; i < format.numAttributes; i++)
    {
        if (format.attributes[i].vertexBufferIdx != gCurrentVertexBufferIndex)
            continue;
        
        FSeek(vertexPos + format.attributes[i].offset);
        VertexAttribute attr(format.attributes[i].name, format.attributes[i].type);
    }
    FSeek(vertexPos + format.vertexSizes[gCurrentVertexBufferIndex]);
}

typedef struct
{
    MakeVertexAttributes(parentof(parentof(this)).vertexFormat);
} Vertex <optimize=true, style=sData>;

typedef struct
{
    uint numEntries : 8;
    uint startIndex : 24;
} BlendShapeSegment <size=4>;

typedef struct (float scale)
{
    local float scale_ = scale;
    uint x : 10 <read=((this / 1023.0 * 2 - 1) * parentof(this).scale_)>;
    uint y : 10 <read=((this / 1023.0 * 2 - 1) * parentof(this).scale_)>;
    uint z : 10 <read=((this / 1023.0 * 2 - 1) * parentof(this).scale_)>;
} BlendShapeVertexOffset <size=4, optimize=true>;

typedef struct
{
    int numBlendShapes;
    int numVertexOffsets;
    int field_8;
    int positionsOffset <format=hex>;
    int normalsOffset <format=hex>;
    int colorsOffset <format=hex>;
    int segmentsOffset <format=hex>;
    int vertexIndicesOffset <format=hex>;
    quad blendShapeBitmaskPtr <format=hex>;
    quad blendShapeDataPtr <format=hex>;
    if (TR_VERSION == 11)
    {
        quad blendShapeSrvsPtr <format=hex>;
    }
    
    local int basePos = startof(parentof(parentof(this)));
    
    FSeek(basePos + blendShapeBitmaskPtr);
    uint supportedBlendShapeBitmasks[(parentof(parentof(this)).header.numBlendShapes + 0x1F) >> 5] <format=hex>;
    
    if (numBlendShapes == 0)
    {
        if (TR_VERSION == 11)
            FAlign(0x20);
        
        return;
    }
    
    FSeek(basePos + segmentsOffset);
    local int numVertices = TR_VERSION == 10 ? parentof(parentof(this)).meshes[gCurrentMeshIndex].numVertices
                                             : parentof(parentof(this)).meshHeaders[gCurrentMeshIndex].numVertices;
    BlendShapeSegment segments[((numVertices + 0x3F) >> 6) * numBlendShapes];
    
    FSeek(basePos + positionsOffset);
    BlendShapeVertexOffset positionOffsets(8)[numVertexOffsets];
    
    FSeek(basePos + normalsOffset);
    BlendShapeVertexOffset normalOffsets(2)[numVertexOffsets];
    
    FSeek(basePos + colorsOffset);
    BlendShapeVertexOffset colorOffsets(1)[numVertexOffsets];
    
    FSeek(basePos + vertexIndicesOffset);
    ubyte vertexIndices[numVertexOffsets];
    
    if (TR_VERSION == 11)
        FAlign(0x20);
} BlendShapes;
