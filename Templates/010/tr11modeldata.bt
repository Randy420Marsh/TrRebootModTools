//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: tr11modeldata.bt
//   Authors: arc_
//   Version: 0.1
//   Purpose: Parse SOTTR model data files
//  Category: SOTTR
// File Mask: *.tr11modeldata
//------------------------------------------------

#include "tr11common.bt"

typedef struct
{
    char magic[4];
    int flags_unknown1 : 14;
    int hasBlendShapes : 1;
    int flags_unknown2 : 17;
    int field_8;
    int numIndices;
    int field_10;
    int field_14;
    int field_18;
    int field_1C;
    Vector boundingBoxMin;
    Vector boundingBoxMax;
    FSeek(0xF8);
    quad meshPartsPos;
    quad meshDescriptorsPos;
    quad boneMappingsPos;
    quad lodLevelsPos;
    quad indexesPos;
    ushort numMeshParts;
    ushort numMeshes;
    ushort numBoneMappings;
    ushort numLodLevels;
    quad data2Pos;
    int data1Size;
    int field_134;
    quad data1Pos;
    int numBlendShapes;
    int field_144;
    quad data6Pos;
    int field_150;
    int field_154;
    int field_158;
    int field_15C;
} ModelDataHeader;

typedef struct
{
    byte data[0x40];
} ModelLodLevel;

typedef struct
{
    int numParts;
    ushort numBones;
    ushort field_6;
    quad boneIndicesPos;
    quad vertexData1Pos;
    quad vertexBuffer1Ptr;
    quad vertexData2Pos;
    quad vertexBuffer2Ptr;
    int vertexFormatSize;
    int field_34;
    quad vertexFormatPos;
    quad blendShapesHeaderPos;
    int numVertices;
    int field_4C;
    int field_50;
    int field_54;
    int field_58;
    int field_5C;
} MeshHeader;

local int gCurrentMeshIndex = 0;

typedef struct
{
    int boneIndices[parentof(this).meshHeaders[gCurrentMeshIndex].numBones];
    FAlign(0x20);
    gCurrentMeshIndex += 1;
} MeshBoneIndices <optimize=false>;

enum <uint> VertexAttributeName
{
    POSITION            = 0xD2F7D823,
    NORMAL              = 0x36F5E414,
    TESSELATION_NORMAL  = 0x3E7F6149,
    TANGENT             = 0xF1ED11C3,
    BINORMAL            = 0x64A86F01,
    SKIN_WEIGHTS        = 0x48E691C0,
    SKIN_INDICES        = 0x5156D8D3,
    COLOR1              = 0x7E7DD623,
    COLOR2              = 0x733EF0FA,
    TEXCOORD1           = 0x8317902A,
    TEXCOORD2           = 0x8E54B6F3,
    TEXCOORD3           = 0x8A95AB44,
    TEXCOORD4           = 0x94D2FB41
};

enum <byte> VertexAttributeType
{
    FLOAT1 = 0,
    FLOAT2 = 1,
    FLOAT3 = 2,
    FLOAT4 = 3,
    R8G8B8A8_UNORM_0 = 4,
    R8G8B8A8_UNORM_1 = 5,
    R8G8B8A8_UNORM_2 = 6,
    R8G8B8A8_UNORM_3 = 7,
    R8G8B8A8_UNORM_4 = 13,
    R8G8B8A8_UNORM_5 = 22,
    R8G8B8A8_UINT_0 = 8,
    R8G8B8A8_UINT_1 = 23,
    R16G16_SINT = 9,
    R16G16B16A16_SINT = 10,
    R16G16B16A16_UINT_0 = 11,
    R16G16B16A16_UINT_1 = 24,
    R32G32B32A32_UINT = 12,
    R16G16_SNORM_0 = 14,
    R16G16_SNORM_1 = 25,
    R16G16B16A16_SNORM_0 = 15,
    R16G16B16A16_SNORM_1 = 26,
    R16G16_UNORM = 16,
    R16G16B16A16_UNORM = 17,
    R10G10B10A2_UINT = 18,
    R10G10B10A2_UNORM_0 = 19,
    R10G10B10A2_UNORM_1 = 20
};

typedef struct
{
    VertexAttributeName name;
    short offset <format=hex>;
    VertexAttributeType type;
    byte vertexBufferIdx;
} VertexFormatAttribute <read=EnumToString(name)>;

typedef struct
{
    quad hash <format=hex>;
    ushort numAttributes;
    ubyte vertexSizes[2] <format=hex>;
    FSkip(4);
    VertexFormatAttribute attributes[numAttributes];
} VertexFormat;

typedef struct (VertexAttributeName name, VertexAttributeType type)
{
    local VertexAttributeName name_ = name;
    switch (type)
    {
        case FLOAT1:
            float x;
            break;
        
        case FLOAT2:
            float x, y;
            break;
        
        case FLOAT3:
            float x, y, z;
            break;
        
        case FLOAT4:
            float x, y, z, w;
            break;
        
        case R8G8B8A8_UNORM_0:
        case R8G8B8A8_UNORM_1:
        case R8G8B8A8_UNORM_2:
        case R8G8B8A8_UNORM_3:
        case R8G8B8A8_UNORM_4:
        case R8G8B8A8_UNORM_5:
            ubyte x <read=(this / 255.0)>;
            ubyte y <read=(this / 255.0)>;
            ubyte z <read=(this / 255.0)>;
            ubyte w <read=(this / 255.0)>;
            break;
        
        case R8G8B8A8_UINT_0:
        case R8G8B8A8_UINT_1:
            ubyte x, y, z, w;
            break;
        
        case R16G16_SINT:
            short x, y;
            break;
        
        case R16G16B16A16_SINT:
            short x, y, z, w;
            break;
        
        case R16G16B16A16_UINT_0:
        case R16G16B16A16_UINT_1:
            ushort x, y, z, w;
            break;
        
        case R32G32B32A32_UINT:
            uint x, y, z, w;
            break;
        
        case R16G16_SNORM_0:
        case R16G16_SNORM_1:
            short x <read=(this / 32768.0)>;
            short y <read=(this / 32768.0)>;
            break;
        
        case R16G16B16A16_SNORM_0:
        case R16G16B16A16_SNORM_1:
            short x <read=(this / 32768.0)>;
            short y <read=(this / 32768.0)>;
            short z <read=(this / 32768.0)>;
            short w <read=(this / 32768.0)>;
            break;
        
        case R16G16_UNORM:
            ushort x <read=(this / 65535.0)>;
            ushort y <read=(this / 65535.0)>;
            break;
        
        case R16G16B16A16_UNORM:
            ushort x <read=(this / 65535.0)>;
            ushort y <read=(this / 65535.0)>;
            ushort z <read=(this / 65535.0)>;
            ushort w <read=(this / 65535.0)>;
            break;
        
        case R10G10B10A2_UINT:
            uint x : 10;
            uint y : 10;
            uint z : 10;
            uint w : 2;
            break;
        
        case R10G10B10A2_UNORM_0:
        case R10G10B10A2_UNORM_1:
            uint x : 10 <read=(this / 1023.0)>;
            uint y : 10 <read=(this / 1023.0)>;
            uint z : 10 <read=(this / 1023.0)>;
            uint w : 2  <read=(this / 3.0)>;
            break;
    }
} VertexAttribute <read=EnumToString(name_)>;

void MakeVertexAttributes(VertexFormat& format)
{
    local int vertexPos = FTell();
    local int i;
    for (i = 0; i < format.numAttributes; i++)
    {
        if (format.attributes[i].vertexBufferIdx != gCurrentVertexBufferIndex)
            continue;
        
        FSeek(vertexPos + format.attributes[i].offset);
        VertexAttribute attr(format.attributes[i].name, format.attributes[i].type);
    }
    FSeek(vertexPos + format.vertexSizes[gCurrentVertexBufferIndex]);
}

typedef struct
{
    MakeVertexAttributes(parentof(parentof(this)).vertexFormat);
} Vertex <optimize=true>;

typedef struct
{
    Vertex vertices[parentof(parentof(this)).meshHeaders[gCurrentMeshIndex].numVertices];
    FAlign(0x20);
    gCurrentVertexBufferIndex++;
} VertexBuffer <optimize=false>;

local int gCurrentVertexBufferIndex = 0;

typedef struct
{
    uint numEntries : 8;
    uint startIndex : 24;
} BlendShapeSegment <size=4>;

typedef struct (float scale)
{
    local float scale_ = scale;
    uint x : 10 <read=((this / 1023.0 * 2 - 1) * parentof(this).scale_)>;
    uint y : 10 <read=((this / 1023.0 * 2 - 1) * parentof(this).scale_)>;
    uint z : 10 <read=((this / 1023.0 * 2 - 1) * parentof(this).scale_)>;
} BlendShapeVertexOffset <size=4, optimize=true>;

typedef struct
{
    int numBlendShapes;
    int numVertexOffsets;
    int field_8;
    int positionsOffset <format=hex>;
    int normalsOffset <format=hex>;
    int colorsOffset <format=hex>;
    int segmentsOffset <format=hex>;
    int vertexIndicesOffset <format=hex>;
    quad blendShapeBitmaskPtr <format=hex>;
    quad blendShapeDataPtr <format=hex>;
    quad blendShapeSrvsPtr <format=hex>;
    FAlign(0x20);
    
    uint supportedBlendShapeBitmasks[(parentof(parentof(this)).header.numBlendShapes + 0x1F) >> 5] <format=hex>;
    FAlign(0x20);
    
    BlendShapeSegment segments[((parentof(parentof(this)).meshHeaders[gCurrentMeshIndex].numVertices + 0x3F) >> 6) * numBlendShapes];
    FAlign(0x20);
    
    BlendShapeVertexOffset positionOffsets(8)[numVertexOffsets];
    FAlign(0x20);
    
    BlendShapeVertexOffset normalOffsets(2)[numVertexOffsets];
    FAlign(0x20);
    
    BlendShapeVertexOffset colorOffsets(1)[numVertexOffsets];
    FAlign(0x20);
    
    ubyte vertexIndices[numVertexOffsets];
    FAlign(0x20);
} BlendShapes;

typedef struct
{
    VertexFormat vertexFormat;
    FAlign(0x20);
    
    gCurrentVertexBufferIndex = 0;
    VertexBuffer vertexBuffers[2];
    
    if (parentof(this).header.hasBlendShapes == 1)
        BlendShapes blendShapes;
    
    gCurrentMeshIndex++;
} MeshContent <optimize=false>;

typedef struct
{
    Vector field_0;
    int firstIndexIdx;
    int numTriangles;
    int field_18;
    int flags <format=hex>;
    int field_20;
    int field_24;
    int field_28;
    short lodLevel;
    short field_2E;
    quad materialIdx;
    quad textureIndices[5] <format=hex>;
} MeshPart;

typedef struct
{
    ModelDataHeader header;
    ubyte data1[header.data1Size];
    ModelLodLevel lodLevels[header.numLodLevels];
    
    int boneMappings[header.numBoneMappings];
    FAlign(0x20);
    
    MeshHeader meshHeaders[header.numMeshes];
    
    gCurrentMeshIndex = 0;
    MeshBoneIndices meshBoneIndices[header.numMeshes];
    
    gCurrentMeshIndex = 0;
    MeshContent meshContents[header.numMeshes];
    
    if (header.data6Pos != 0)
        FSkip(header.numBlendShapes * 0x40);
    
    ushort indices[header.numIndices];
    FAlign(0x20);
    
    MeshPart meshParts[header.numMeshParts];
} ModelData;

ModelData modelData;
