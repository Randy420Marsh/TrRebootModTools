//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: tr11skeleton.bt
//   Authors: arc_
//   Version: 0.1
//   Purpose: Parse SOTTR skeletons
//  Category: SOTTR
//------------------------------------------------

#include "tr11common.bt"

typedef struct
{
    Vector4 position;
    Quaternion orientation;
    float distanceFromParent;
    int flags <format=hex>;
    int parentBoneId;
    int field_2C;
    int field_30;
    int field_34;
    int field_38;
    int field_3C;
} Bone;

typedef struct
{
    quad numBones;
    InternalRef bonesRef;
    if (exists(bonesRef.target))
    {
        local int prevPos = FTell();
        FSeek(startof(bonesRef.target));
        Bone bones[numBones] <style=sData>;
        FSeek(prevPos);
    }
} BoneArray;

typedef struct
{
    ushort globalId;
    ushort localId;
} IdMapping <read=Str("%d -> %d", globalId, localId)>;

typedef struct
{
    ushort localIdRange1Start;
    ushort localIdRange2Start;
    ushort count;
} CounterpartRange;

typedef struct
{
    while (true)
    {
        CounterpartRange range;
        if (range.count == 0)
            break;
    }
} CounterpartRanges;

typedef struct
{
    ubyte type;
    FSkip(1);
    ushort localBoneId;
    ushort numAssociatedLocalBoneIds;
    FSkip(2);
    
    InternalRef associatedLocalBoneIdsRef;
    if (IsValidRef(associatedLocalBoneIdsRef))
    {
        SeekToRef(associatedLocalBoneIdsRef);
        ushort associatedLocalBoneIds[numAssociatedLocalBoneIds];
        ReturnFromRef();
    }
    
    InternalRef floatsRef;
    if (IsValidRef(floatsRef))
    {
        SeekToRef(floatsRef);
        float floats[numAssociatedLocalBoneIds];
        ReturnFromRef();
    }
    
    InternalRef quaternionRef;
    if (IsValidRef(quaternionRef))
    {
        SeekToRef(quaternionRef);
        Quaternion quaternion;
        ReturnFromRef();
    }
} ExtraBoneInfo;

typedef struct
{
    local int i;
    for (i = 0; i < parentof(this).numExtraBoneInfos; i++)
    {
        if (IsValidRef(parentof(this).extraBoneInfoRefs[i]))
        {
            SeekToRef(parentof(this).extraBoneInfoRefs[i]);
            ExtraBoneInfo extraBoneInfo;
            ReturnFromRef();
        }
    }
} ExtraBoneInfos;

typedef struct
{
    InternalRef boneArrayRef;
    if (IsValidRef(boneArrayRef))
    {
        SeekToRef(boneArrayRef);
        BoneArray boneArray <style=sHeading2>;
        ReturnFromRef();
    }
    
    short numAnimIdMappings;
    FSkip(6);
    
    InternalRef counterpartRangesRef;
    if (IsValidRef(counterpartRangesRef))
    {
        SeekToRef(counterpartRangesRef);
        CounterpartRanges counterpartRanges;
        ReturnFromRef();
    }
    
    short numUnusedWords1;
    FSkip(6);
    InternalRef unusedWords1Ref;
    if (IsValidRef(unusedWords1Ref))
    {
        SeekToRef(unusedWords1Ref);
        ushort unusedWords1[numUnusedWords1] <style=sSection1>;
        ReturnFromRef();
    }
    
    short numBoneIdMappings;
    FSkip(6);
    InternalRef boneIdMappingsRef;
    if (IsValidRef(boneIdMappingsRef))
    {
        SeekToRef(boneIdMappingsRef);
        IdMapping boneIdMappings[numBoneIdMappings] <style=sSection2>;
        ReturnFromRef();
    }
    
    ubyte numBlendShapeIdMappings;
    FSkip(7);
    InternalRef blendShapeIdMappingsRef;
    if (IsValidRef(blendShapeIdMappingsRef))
    {
        SeekToRef(blendShapeIdMappingsRef);
        IdMapping blendShapeIdMappings[numBlendShapeIdMappings] <style=sSection2Accent>;
        ReturnFromRef();
    }
    
    ubyte numExtraBoneInfos;
    FSkip(7);
    InternalRef extraBoneInfoRefsRef;
    if (IsValidRef(extraBoneInfoRefsRef))
    {
        SeekToRef(extraBoneInfoRefsRef);
        InternalRef extraBoneInfoRefs[numExtraBoneInfos];
        ReturnFromRef();
        
        ExtraBoneInfos extraBoneInfos;
    }
    
    ubyte numUnusedWords2;
    FSkip(7);
    InternalRef unusedWords2Ref;
    if (IsValidRef(unusedWords2Ref))
    {
        SeekToRef(unusedWords2Ref);
        ushort unusedWords2[numUnusedWords2] <style=sSection3>;
        ReturnFromRef();
    }
    
    InternalRef unusedBytesRef;
    if (IsValidRef(unusedBytesRef))
    {
        SeekToRef(unusedBytesRef);
        byte unusedBytes[boneArray.numBones] <style=sDataAccent>;
        ReturnFromRef();
    }
    
    InternalRef localBoneIdsByAnimIdRef;
    if (IsValidRef(localBoneIdsByAnimIdRef))
    {
        SeekToRef(localBoneIdsByAnimIdRef);
        ushort localBoneIdsByAnimId[numAnimIdMappings] <style=sSection4>;
        ReturnFromRef();
    }
    
    InternalRef animBoneIdsByLocalIdRef;
    if (IsValidRef(animBoneIdsByLocalIdRef))
    {
        SeekToRef(animBoneIdsByLocalIdRef);
        ushort animBoneIdsByLocalId[numAnimIdMappings] <style=sSection4Accent>;
        ReturnFromRef();
    }
    
    short unknownCounts[4];
} Skeleton;

RefDefinitions refDefinitions;
Skeleton skeleton <open=true>;
